{"version":3,"sources":["Recipe.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","image","title","ingredients","className","src","alt","map","ingredient","text","App","useState","recipes","setRecipes","search","setSearch","query","setQuery","getRecipes","a","async","fetch","response","json","data","hits","console","log","useEffect","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","recipe","key","label","yield","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAmBeA,EAhBA,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,MAAOC,EAAiB,EAAjBA,YAC3B,OAEY,yBAAKC,UAAU,yBACX,yBAAKC,IAAKJ,EAAOK,IAAKJ,IACtB,4BAAKA,GACL,4BACKC,EAAYI,KAAI,SAAAC,GAAU,OACvB,4BAAKA,EAAWC,YCkE7BC,G,MAvEH,WAEV,IAFgB,EAKcC,mBAAS,IALvB,mBAKTC,EALS,KAKAC,EALA,OAMYF,mBAAS,IANrB,mBAMTG,EANS,KAMDC,EANC,OASUJ,mBAAS,IATnB,mBASTK,EATS,KASFC,EATE,KAaVC,EAAa,4BAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACME,MAAM,mCAAD,OAAoCL,EAApC,mBAZf,WAYe,oBAXd,sCAUG,cACXM,EADW,kBAAAH,EAAA,MAEEG,EAASC,QAFX,OAEXC,EAFW,OAGjBX,EAAWW,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAJA,sCAOnBG,qBAAU,WACRV,MACC,CAACA,EAAYF,IAahB,OAEE,yBAAKZ,UAAU,OAEb,4BAAQA,UAAU,mBAChB,wBAAIA,UAAU,aAAd,wBAGF,yBAAKA,UAAU,gBAEb,uBAAGA,UAAU,SAAb,4EAEA,qGAEA,0BAAMyB,SApBM,SAAAC,GAChBA,EAAEC,iBACFd,EAASH,GACTC,EAAU,KAiBqBX,UAAU,eACnC,2BAAOA,UAAU,aAAa4B,KAAK,OAAOC,MAAOnB,EAAQoB,SA1B5C,SAAAJ,GACnBf,EAAUe,EAAEK,OAAOF,OACnBP,QAAQC,IAAIb,IAwB2EsB,YAAY,wBAC7F,4BAAQhC,UAAU,aAAa4B,KAAK,UAApC,WAGF,yBAAK5B,UAAU,6BACZQ,EAAQL,KAAI,SAAA8B,GAAM,OACjB,kBAAC,EAAD,CACEC,IAAKD,EAAOA,OAAOE,MACnBtC,MAAOoC,EAAOA,OAAOpC,MACrBC,MAAOmC,EAAOA,OAAOE,MACrBpC,YAAakC,EAAOA,OAAOlC,YAC3BqC,MAAOH,EAAOA,OAAOG,gBCvDfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.075e14d1.chunk.js","sourcesContent":["import React from 'react';\n// import '../styles/styles.scss';\n\nconst Recipe = ({image, title, ingredients}) => {\n    return (\n       \n                <div className='recipe-card container'>\n                    <img src={image} alt={title}></img>\n                    <h2>{title}</h2>\n                    <ul>\n                        {ingredients.map(ingredient => (\n                            <li>{ingredient.text}</li>\n                        ))}\n                    </ul>\n                </div>\n\n        );\n};\n\nexport default Recipe;","import React, { useEffect, useState } from 'react';\nimport Recipe from './Recipe';\nimport './styles/styles.css'\n\n// ==================================================================\n\nconst App = () => {\n\n  const APP_ID = 'b8e84cf5';\n  const APP_KEY = '95eb91940e183872739ef92440563fe2';\n\n  const [recipes, setRecipes] = useState([]);\n  const [search, setSearch] = useState('');\n  // ONLY SUBMIT REQUEST AFTER CLICK\n  // REMOVE DEFAULT SEARCH\n  const [query, setQuery] = useState('');\n\n  // MAKE REQUEST FROM API\n  // ASYNC/AWAIT REQUEST FOR DATA IN JSON\n  const getRecipes = async () => {\n    const response = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`);\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits);\n  };\n\n  useEffect(() => {\n    getRecipes();\n  }, [getRecipes, query]);\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n    console.log(search);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n  return (\n\n    <div className='App'>\n\n      <header className='title container'>\n        <h1 className='container'>Let's get delicious</h1>\n      </header>\n\n      <div className='body wrapper'>\n\n        <p className='intro'>No need to resort to takeout.  Find something delicious to make tonight.</p>\n\n        <p>Type in an ingredient you have on hand and get some tasty inspiration!</p>\n\n        <form onSubmit={getSearch} className='search-form'>\n          <input className='search-bar' type=\"text\" value={search} onChange={updateSearch} placeholder=\"Enter an ingredient\"></input>\n          <button className='search-btn' type=\"submit\">Search</button>\n        </form>\n\n        <div className='results-section container'>\n          {recipes.map(recipe => (\n            <Recipe\n              key={recipe.recipe.label}\n              image={recipe.recipe.image}\n              title={recipe.recipe.label}\n              ingredients={recipe.recipe.ingredients}\n              yield={recipe.recipe.yield}\n            />\n          ))}\n        </div>\n\n      </div>\n    </div>\n  )\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}